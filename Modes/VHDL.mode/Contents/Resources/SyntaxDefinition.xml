<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <!-- 
    The <head> tag encloses some global information about the mode.
    This tag is required.
    -->    
    <head>

        <!-- 
        The <name> specifies the modes name. It is currently not used in the application,
        as the mode name is loaded from Info.plist, however it is a good idea to specify
        this tag to don't get confused if the definitions is outside a bundle during
        development.
        This tag is optional.
        -->    
        <name>VHDL Syntax</name>

        <!-- 
        The <charsintokens> and the <charsdelimitingtokens> instruct the syntax highlighter
        where to tokenize the text for fast finding of plain strings.
        The <charsintokens> tag specifies the characters that can occur in strings,
        the <charsdelimitingtokens> tag specifies the tags that cannot occur in strings.
        One of these tags has to be specified.
        Tip: Use CDATA here.
        -->    
        <charsintokens>
            <![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]]>
        </charsintokens> 
        <!-- <charsdelimitingtokens>[CDATA[ -]]></charsdelimitingtokens> -->

    </head>

    <!-- 
    The <states> tag encloses all syntax states.
    States are areas of the test that begin and end with an regex like comments or strings,
    with exception of the default state, that exists anywhere where no other state exists.
    This tag is required.
    -->    

    <states>
    
        <!-- 
        The <default> tag specifies what is colored within the default state (see above).
        It features the following attributes, all optional if not noted otherwise:
            id
                Has to be a unique string. Has to be specified.
            color
                a html comptible color in three or six letter hexadecimal format.
                Used for text on bright document background colors.
            inverted-color
                a html comptible color in three or six letter hexadecimal format.
                Used for text if a dark document background color is set.
            font-weight
                normal  Normal font-weight (default)
                bold    Bold text in popup
            font-style
                normal  Normal font-weight (default)
                italic  Bold text in popup
                
        -->    
    
        <default id="Base" color="#000" inverted-color="#fff">

            <!-- 
            The <keywords> tag specifies keyword groups within the current state.
            It features the following attributes, all optional if not noted otherwise:
                id
                    Has to be a unique string. Has to be specified.
                color
                    a html comptible color in three or six letter hexadecimal format.
                    Used for text on bright document background colors.
                inverted-color
                    a html comptible color in three or six letter hexadecimal format.
                    Used for text if a dark document background color is set.
                font-weight
                    normal  Normal font-weight (default)
                    bold    Bold text in popup
                font-style
                    normal  Normal font-weight (default)
                    italic  Bold text in popup
                casesensitive
                    yes     This group is case sensitive (default)
                    no      Ignore case for the group
                useforautocomplete
                    yes     Add this group's strings to the autocomplete dictionary (default)
                    no      Don't add to autocomplete dictionary
            -->    

            <keywords id="Keywords" color="#6C0540" casesensitive="no" font-weight="bold" useforautocomplete="yes">
                <!-- 
                    <string> tags specify plain text to be colored. If your tag does not
                    get colored, check in <charsintokens> if you are tokenizing correctly.             
                --> 
	<string>access</string>
	<string>after</string>
	<string>alias</string>
	<string>all</string>
	<string>assert</string>
	<string>architecture</string>
	<string>array</string>
	<string>attribute</string>
	<string>begin</string>
	<string>block</string>
	<string>body</string>
	<string>buffer</string>
	<string>bus</string>
	<string>case</string>
	<string>component</string>
	<string>configuration</string>
	<string>constant</string>
	<string>disconnect</string>
	<string>downto</string>
	<string>else</string>
	<string>elsif</string>
	<string>end</string>
	<string>entity</string>
	<string>exit</string>
	<string>file</string>
	<string>for</string>
	<string>function</string>
	<string>generate</string>
	<string>generic</string>
	<string>group</string>
	<string>guarded</string>
	<string>if</string>
	<string>impure</string>
	<string>in</string>
	<string>inertial</string>
	<string>inout</string>
	<string>is</string>
	<string>label</string>
	<string>library</string>
	<string>linkage</string>
	<string>literal</string>
	<string>loop</string>
	<string>map</string>
	<string>new</string>
	<string>next</string>
	<string>null</string>
	<string>of</string>
	<string>on</string>
	<string>open</string>
	<string>others</string>
	<string>out</string>
	<string>package</string>
	<string>port</string>
	<string>postponed</string>
	<string>procedure</string>
	<string>process</string>
	<string>pure</string>
	<string>range</string>
	<string>record</string>
	<string>register</string>
	<string>reject</string>
	<string>report</string>
	<string>return</string>
	<string>select</string>
	<string>severity</string>
	<string>signal</string>
	<string>shared</string>
	<string>subtype</string>
	<string>then</string>
	<string>to</string>
	<string>transport</string>
	<string>type</string>
	<string>unaffected</string>
	<string>units</string>
	<string>until</string>
	<string>use</string>
	<string>variable</string>
	<string>wait</string>
	<string>when</string>
	<string>while</string>
	<string>with</string>
	<string>note</string>
	<string>warning</string>
	<string>error</string>
	<string>failure</string>
            </keywords>

    <keywords id="Types" color="#408" casesensitive="no" useforautocomplete="yes">
        <string>bit</string>
        <string>bit_vector</string>
        <string>boolean</string>
        <string>integer</string>
        <string>natural</string>
        <string>positive</string>
        <string>positive</string>
        <string>real</string>
        <string>character</string>
        <string>string</string>
        <string>severity_level</string>
        <string>std_logic</string>
        <string>std_logic_vector</string>
        <string>time</string>
    </keywords>

    <keywords id="Attributes" color="#003369" casesensitive="no" useforautocomplete="yes">
	<string>high</string>
	<string>left</string>
	<string>length</string>
	<string>low</string>
	<string>range</string>
	<string>reverse_range</string>
	<string>right</string>
	<string>ascending</string>

	<string>behaviour</string>
	<string>structure</string>
	<string>simple_name</string>
	<string>instance_name</string>
	<string>path_name</string>
	<string>foreign</string>

	<string>active</string>
	<string>delayed</string>
	<string>event</string>
	<string>last_active</string>
	<string>last_event</string>
	<string>last_value</string>
	<string>quiet</string>
	<string>stable</string>
	<string>transaction</string>
	<string>driving</string>
	<string>driving_value</string>

	<string>base</string>
	<string>high</string>
	<string>left</string>
	<string>leftof</string>
	<string>low</string>
	<string>pos</string>
	<string>pred</string>
	<string>rightof</string>
	<string>succ</string>
	<string>val</string>
	<string>image</string>
	<string>value</string>
    </keywords>

    <keywords id="Operators" color="#0b0bff" font-weight="bold" useforautocomplete="yes">
	<string>and</string>
	<string>or</string>
	<string>not</string>
	<string>mod</string>
	<string>rem</string>
	<string>xor</string>
	<string>nor</string>
	<string>nand</string>
    </keywords>

            <keywords id="Pramas" color="#e02040" casesensitive="no" useforautocomplete="yes">
                <!-- 
                    <regex> tags specify regular expression to be colored. 
                    Only the first group will be colored, so enclose the part to color
                    with parens.
                    The example colors digits prefixed by foo. (only the digits)             
                -->    
        <regex>pragma ([A-Za-z0-9_]+ *)</regex>
            </keywords>
            <keywords id="Numbers" color="#00f" useforautocomplete="no">
        <regex>(?&lt;=[^[A-Za-z0-9]]|^)((([0-9]+\.[0-9]*)|(\.[0-9]+)([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]))(([uU][lL]?)|([lL][uU]?))?))(?=[^[A-Za-z0-9]]|$)</regex>
            </keywords>
            <keywords id="Characters" color="#00f" useforautocomplete="no">
        <regex>('.')</regex>
            </keywords>
        </default>
        
        <!-- 
            The <state> tag specifies a state other than the default state.
            It features the same attributes as <default>.
            It has to contain a <begin> and a <end> tag which in turn have to 
            contain a <regex> tag. They can contain <keywords> tags like specified above.
            
            For example here a states for C blockcomments, C++ singleline comments and strings.
            The strings state handles escaped quotes with a lookbehind regular expression 
            (see a regex tutorial) and colors "foobar" with strings.
        -->    


        <state id="SingleComment" color="#236E25" font-style="italic">
            <begin><regex>--</regex></begin>
            <end><regex>[\n\r]</regex></end>
        </state>
        
        <state id="String" color="#760f15">
            <begin><regex>"</regex></begin>
            <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>
        </state>

    </states>

</syntax>
